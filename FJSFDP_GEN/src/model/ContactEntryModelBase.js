//{FON:GEN:d6dc6cae606675f2e4fc6aad891c41b3} GENERATED CODE! DO NOT EDIT MANUALY!
namespace('fjs.fdp');


/**
 * Code generated by com.fonality.meta.generator.java.fdp.client.fjs.JGen_FJS_FeedModelEntryBase
 * Meta contact is the structure provided data about any
 * contact in the system, pbx, xmpp, etc.
 * Any count of data from different
 * user lists can be joined and use same
 * set of fields.
 * @constructor
 */
fjs.fdp.ContactEntryModelBase = function()
{
	
	/**
	 * Jabber/XMPP id of contact
	 * @type {String}
	 */
	this.jid = null; //$NON-NLS-1$
	/**
	 * Contact's' first name.
	 * @type {String}
	 */
	this.firstName = null; //$NON-NLS-1$
	/**
	 * Contact's last name.
	 * @type {String}
	 */
	this.lastName = null; //$NON-NLS-1$
	/**
	 * Contact's full name.
	 * @type {String}
	 */
	this.fullName = null; //$NON-NLS-1$
	/**
	 * Contact's display name. FDP client application should
	 * always use this field to show contact name for common purposes.
	 * @type {String}
	 */
	this.displayName = null; //$NON-NLS-1$
	/**
	 * Primary email address of contact.
	 * @type {String}
	 */
	this.email = null; //$NON-NLS-1$
	/**
	 * Semicolon separated list of user instant messengers.
	 * @type {String}
	 */
	this.ims = null; //$NON-NLS-1$
	/**
	 * Business phone number. For pbx contacts it is direct
	 * phone number (call to this number will forward call to contact
	 * primary extension). For xmpp users this values taken from XMPP vCard.
	 * @type {String}
	 */
	this.phoneBusiness = null; //$NON-NLS-1$
	/**
	 * Mobile phone number.
	 * @type {String}
	 */
	this.phoneMobile = null; //$NON-NLS-1$
	/**
	 * Primary extension number.
	 * @type {String}
	 */
	this.primaryExtension = null; //$NON-NLS-1$
	/**
	 * User's voicemail box number.
	 * @type {String}
	 */
	this.voicemailBox = null; //$NON-NLS-1$
	/**
	 * Display name or caller/callee name on other side or the call
	 * <p/>
	 * In depends on call type, direction, permissions etc. it can be one of the following:
	 * <ul>
	 * <li>Display name of fdp contact</li>
	 * <li>Caller name for external contacts</li>
	 * <li>Conference room name and number (subject for i18n in v1.1)</li>
	 * <li>null/empty - for unknown caller</li>
	 * <li>null/empty - for blocked numbers</li>
	 * </ul>
	 * @type {String}
	 */
	this.calls_displayName = null; //$NON-NLS-1$
	/**
	 * Formatted phone number of person/entity on other side or the call
	 * <p/>
	 * In depends on call type, direction, permissions etc. it can be one of the following:
	 * <ul>
	 * <li>Extension number (3-5 digits) of fdp contact, queue, conference etc.</li>
	 * <li>Formatted external number</li>
	 * <li>Formatted mobile phone number of fdp contact</li>
	 * <li>null/empty - if extension/phone is unknown or blocked by permissions</li>
	 * </ul>
	 * @type {String}
	 */
	this.calls_phone = null; //$NON-NLS-1$
	/**
	 * In case of office or voicemail call this field provides meta pid (both source id and pid) of contact
	 * on other side of the call. Can be used on client side to get picture of other side of the call.
	 * <br/>
	 * It is empty/null for external calls or in case of applied permissions.
	 * @type {String}
	 */
	this.calls_contactId = null; //$NON-NLS-1$
	/**
	 * Incoming or outgoing direction of call. If true call is
	 * incoming, otherwise call is outbound i.e this contact initiate a call
	 * @type {boolean}
	 */
	this.calls_incoming = null;
	/**
	 * If true this side of call is being recorded.In depends on
	 * permissions this fact can be hidden and value will be always false.
	 * @type {boolean}
	 */
	this.calls_recorded = null;
	/**
	 * If true this call is barge call
	 * @type {String}
	 */
	this.calls_barge = null; //$NON-NLS-1$
	/**
	 * If not None call is barged by user
	 * @type {String}
	 */
	this.calls_bargedByMeOptions = null; //$NON-NLS-1$
	/**
	 * Call type, see com.fonality.fdp.FDPCallType.
	 * @type {String}
	 */
	this.calls_type = null; //$NON-NLS-1$
	/**
	 * Call type, see com.fonality.fdp.CallState.
	 * @type {String}
	 */
	this.calls_state = null; //$NON-NLS-1$
	/**
	 * Creation time
	 * @type {number}
	 */
	this.calls_startedAt = null;
	/**
	 * @type {Object}
	 */
	this.calls_connection = null;
	/**
	 * Conference id, if any, entry is linked to.
	 * @type {String}
	 */
	this.calldetails_conferenceId = null; //$NON-NLS-1$
	/**
	 * Queue id, if any, entry is linked to.
	 * @type {String}
	 */
	this.calldetails_queueId = null; //$NON-NLS-1$
	/**
	 * Department id, if any, entry is linked to.
	 * @type {String}
	 */
	this.calldetails_departmentId = null; //$NON-NLS-1$
	/**
	 * Conference call initiator.
	 * @type {String}
	 */
	this.calldetails_createdBy = null; //$NON-NLS-1$
	/**
	 * Bit set of disallowed actions. If zero, all actions allowed.
	 * callPermissions.
	 * @type {int}
	 */
	this.calldetails_permissions = null;
	/**
	 * Bit set of disallowed actions. If zero, all actions allowed.
	 * @type {int}
	 */
	this.contactpermissions_permissions = null;
	/**
	 * XMPP status (available, offline, away, etc)
	 * @type {String}
	 */
	this.contactstatus_xmpp = null; //$NON-NLS-1$
	/**
	 * XMPP custom status text
	 * @type {String}
	 */
	this.contactstatus_xmppCustom = null; //$NON-NLS-1$
	/**
	 * Status of current contact device(registered,
	 * unregistered, lagged)
	 * @type {String}
	 */
	this.contactstatus_deviceStatus = null; //$NON-NLS-1$
	/**
	 * @type {String}
	 */
	this.contactstatus_mobileStatus = null; //$NON-NLS-1$
	/**
	 * Summary status in all queues
	 * @type {String}
	 */
	this.contactstatus_queueStatus = null; //$NON-NLS-1$
	/**
	 * Custom reason of queue status(custom logout for instance)
	 * @type {String}
	 */
	this.contactstatus_queueStatusReason = null; //$NON-NLS-1$
};
